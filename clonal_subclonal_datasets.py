"""
Project: MDSC 508 Thesis
Author: Neera Patadia

Description:
This script is separate the SKCM variants into the clonal and subclonal datasets.
The clonality of the variant is determined by the variant allele fraction (VAF).
The VAF is as follows: VAF = t_alt_count/(t_alt_count + t_ref_count). Variants
that have a VAF > 0.5 are considered to be clonal. Variants that have a VAF < 0.5
are considered to be subclonal. Please refer to the thesis document for additonal
information.

Input File:
SKCM Mutation Anotation Files (MAF) obtained from Firehose: http://firebrowse.org/.

Output File:
There are two output files generated by this script, one for clonal variants, and
one for subclonal vairants. List of variants, with gene_name, mutation_effect,
cDNA_change, ref_variant,and alt_variant.

Running Instructions:
python3 clonal_subclonal_datasets.py
"""


import os
import re

SKCM_maf_files = []
for i in os.listdir("/Users/Neera/Dropbox (APJdKL)/Patadia-Neera/Working/MAF_Files/SKCM_cancer_mafs"):
    if i.endswith("maf.txt"):
        SKCM_maf_files.append(open("/Users/Neera/Dropbox (APJdKL)/Patadia-Neera/Working/MAF_Files/SKCM_cancer_mafs/"+i, "r", encoding="ISO-8859-1"))
        print(i)

skcm_clonal = open("skcm_clonal_variants.txt", "w")
skcm_subclonal = open("skcm_subclonal_variants.txt", "w")

skcm_clonal.write("Gene" + "\t" + "mut_eff" + "\t" + "cDNA_change" + "\t" + "Ref" + "\t" + "Alt" +"\n")
skcm_subclonal.write("Gene" + "\t" + "mut_eff" + "\t" + "cDNA_change" + "\t" + "Ref" + "\t" + "Alt" +"\n")


for file in SKCM_maf_files:
    count = 0
    for line in file:
        count +=1
        if count != 1:
            header = line.split("\t")
            print("Gene: " + header[0])
            print("mut_eff: " + header[8])
            print("t_ref_count: " + header[80])
            print("t_alt_count: " + header[83])
            VAF = int(header[83])/(int(header[83]) + int(header[80]))
            if VAF >= 0.5:
                skcm_clonal.write(header[0] + "\t" + header[8] + "\t" + header[39] + "\t" + header[10] + "\t" + header[11] + "\n")

            else:
                skcm_subclonal.write(header[0] + "\t" + header[8] + "\t" + header[39] + "\t" + header[10] + "\t" + header[11] + "\n")

    file.close()
